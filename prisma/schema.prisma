

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  contributor
  organizer
}

model profiles {
  id                        String   @id@default(uuid())
  username                  String   
  full_name                  String   
  bio                       String?
  skills                    String[]
  interests                 String[]
  role             Role
  github_username           String?
  discord_username          String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}


model contributions {
  id          String   @id @default(uuid())
  title       String
  type        String
  userId      String
  projectId   String
  status      String?
  url         String?
  created_at DateTime? @default(now())

  projects   projects @relation(fields: [projectId], references: [id])
}




model activities {
  id            String   @id @default(uuid())
  title         String
  description   String?
  type          String
  userId        String
  projectId     String?
  created_at   DateTime? @default(now())
  metadata    Json?

  projects     projects? @relation(fields: [projectId], references: [id])
}



model bookmarks {
  id          String     @id @default(uuid())
  projectId   String
  userId      String
  created_at   DateTime?  @default(now())

  projects   projects @relation(fields: [projectId], references: [id])
}






model projects {
  id                       String   @id@default(uuid())
  organizer_id             String  
  title                    String
  description              String
  repository_url           String?
  website_url              String?
  tags                     String[]
  difficulty_lvl           String?
  status                   String?
  look_for_contributor     Boolean?
  mentor_available         Boolean?
  no_of_contributor        Int?
  open_issues              Int?
  merged_prs               Int?
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt

  activities     activities[]
  contributions  contributions[]
  bookmarks      bookmarks[]

}



model badges {
  id            String     @id @default(uuid())
  name          String
  description   String?
  icon          String?
  criteria      Json?
  created_at     DateTime?  @default(now())

  user_badges   user_badges[]
}

model user_badges {
  id          String     @id @default(uuid())
  userId      String
  badgeId     String
  earned_at    DateTime?  @default(now())

  badges      badges     @relation(fields: [badgeId], references: [id])
}

model user_roles {
  id          String      @default(uuid())
  user_id     String      @unique
  role        String     
  created_at  DateTime    @default(now())
}